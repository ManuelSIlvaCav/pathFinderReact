{"version":3,"sources":["serviceWorker.js","components/pathFinderVisualizer/grid/node.jsx","services/dijkstra.js","context/selectionContext.js","components/pathFinderVisualizer/grid/gridHelpers.jsx","services/astar.js","services/mazes/recursiveMaze.js","services/dfs.js","services/mazes/simpleMaze.js","services/bfs.js","components/pathFinderVisualizer/grid/grid.jsx","services/mazes/staircase.js","components/pathFinderVisualizer/navBar/topNavBar.jsx","components/pathFinderVisualizer/navBar/docBar.jsx","context/windowContext.js","components/pathFinderVisualizer/pathFinderVisualizer.jsx","windowsSize.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Node","props","state","this","isStart","isFinish","isWall","row","col","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","key","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisistedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getShortestPath","nodesInShortestPathOrder","currentNode","unshift","visualizeState","algorithmSelected","enableVisualize","toggleAlgorithm","toggleEnable","toggleClear","completedVisualize","clearBoard","mazeSelected","toggleMaze","clearWalls","toggleClearWalls","clearPath","toggleClearPath","VisualizeContext","React","createContext","createGrid","row_count","col_count","currentRow","createNode","reCreateGrid","curStartPos","curEndPos","timestamp","Date","now","f","g","h","clearGrid","ROW_COUNT","COL_COUNT","newGrid","slice","document","getElementById","newNode","getNewGridWithWallsToggle","aStarSearch","currNode","openList","closedList","closedListInOrder","i","j","foundEnd","a","b","isValid","isEnding","isBlocked","gNew","hNew","calculateHValueManhattan","fNew","curNode","Math","abs","buildRecursiveMaze","endNode","wallsNodeOrder","colIndex","recursiveMaze","maxCol","maxRow","minCol","minRow","prevDirection","invalidNode","isHorizontal","floor","random","pos","selectRandomNode","opening","allRange","selectRandomOpening","rowPos","colPos","options","indexPos","offLoop","validPos","pairsFromRange","splice","min","max","pairArray","dfsSearch","isRandom","sortedVisistedNodes","pop","getNeighbors","forEach","arrayItem","dfsUtil","array","isWallMade","bfsSearch","GridView","mousePressed","wallDrawing","moveStartNode","moveEndNode","computed","available","curAlgorithm","nextProps","prevState","setState","moment","diff","prevStartRow","prevStartCol","newPrevNode","node2","getNewGridWithStartNodeMove","reCalculateGrid","getNewGridWithEndNodeMove","console","log","startPos","endPos","shortestPath","includes","setTimeout","animateShortestPath","animatePath","v","randomDFS","wallNodes","buildSimpleMaze","row_aux","dirTop","buildStairCaseMaze","visualizeRecursiveMaze","visualizeSimpleMaze","visualizeStairMaze","clear","visualizeDijkstra","visualizeAstar","visualizeDFS","visualizeBFS","renderGrid","Consumer","checkState","map","rowId","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","TopNavBar","selection","algorithmSelectHandler","Navbar","bg","variant","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","AlgorithmDropDown","MazeAndPatterns","LoadingButton","ClearTab","ClearWallTab","ClearPathTab","NavDropdown","title","Item","onSelect","ButtonToolbar","Button","disabled","onClick","handleClick","Link","DocBar","Grid","container","spacing","item","xs","sm","md","lg","WindowContext","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathFinderVisualizer","getWindowDimensions","width","innerWidth","height","innerHeight","App","algorithm","maze","Provider","value","Main","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","xSize","ySize","getCounts","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3885d80.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./node.css\";\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    const {\r\n      isStart,\r\n      isFinish,\r\n      isWall,\r\n      row,\r\n      col,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"node-empty\";\r\n    return (\r\n      <td\r\n        id={`node-${row}-${col}`}\r\n        key={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></td>\r\n    );\r\n  }\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  //1. Mark all nodes unvisited - Set of unvisited Nodes\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  //3. set tentative distances\r\n  \r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n\r\n    const closestNode = unvisitedNodes.shift();\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    //If wall skip it\r\n    if (closestNode.isWall && !closestNode.isStart) continue;\r\n\r\n    //5. If dest node is dist Infinity or visisted Stop\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n\r\n    //4. when done mark current as visited\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    \r\n\r\n    //6. Oc. select unvisisted node and repeat\r\n    updateUnvisistedNeighbors(closestNode, grid);\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction updateUnvisistedNeighbors(closestNode, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = closestNode.distance + 1;\r\n    neighbor.previousNode = closestNode;\r\n  }\r\n}\r\n\r\nexport function getShortestPath(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React from \"react\";\r\n\r\nexport const DIJKSTRA = \"Dijkstra\";\r\nexport const ASTAR = \"A*\";\r\nexport const BFS = \"BFS\";\r\nexport const DFS = \"DFS\";\r\nexport const RANDOMDFS = \"RANDOMDFS\";\r\n\r\nexport const DFSMAZE = \"DFSMAZE\";\r\nexport const RECURSIVEMAZE = \"RECURSIVEMAZE\";\r\nexport const SIMPLEMAZE = \"SIMPLEMAZE\";\r\nexport const STAIRCASEMAZE = \"STAIRMAZE\";\r\n\r\nexport const visualizeState = {\r\n  algorithmSelected: DIJKSTRA,\r\n  enableVisualize: false,\r\n  toggleAlgorithm: () => {},\r\n  toggleEnable: () => {},\r\n  toggleClear: () => {},\r\n  completedVisualize: false,\r\n  clearBoard: false,\r\n  mazeSelected: null,\r\n  toggleMaze: () => {},\r\n  clearWalls: false,\r\n  toggleClearWalls: () => {},\r\n  clearPath: false,\r\n  toggleClearPath: () => {}\r\n};\r\n\r\nexport const VisualizeContext = React.createContext(visualizeState);\r\n","export const START_NODE_ROW = 5;\r\nexport const START_NODE_COL = 5;\r\nexport const FINISH_NODE_ROW = 5;\r\nexport const FINISH_NODE_COL = 15;\r\n\r\nexport const createGrid = (row_count, col_count) => {\r\n  const grid = [];\r\n  for (let row = 0; row < row_count; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < col_count; col++) {\r\n      currentRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nexport const reCreateGrid = (row_count, col_count, curStartPos, curEndPos) => {\r\n  const grid = [];\r\n  for (let row = 0; row < row_count; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < col_count; col++) {\r\n      currentRow.push({\r\n        col,\r\n        row,\r\n        isStart: row === curStartPos[0] && col === curStartPos[1],\r\n        isFinish: row === curEndPos[0] && col === curEndPos[1],\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n        timestamp: Date.now(),\r\n        f: Infinity,\r\n        g: Infinity,\r\n        h: Infinity\r\n      });\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nexport const clearGrid = (grid, ROW_COUNT, COL_COUNT) => {\r\n  const newGrid = grid.slice();\r\n  for (let row = 0; row < ROW_COUNT; row++) {\r\n    for (let col = 0; col < COL_COUNT; col++) {\r\n      if (START_NODE_ROW === row && START_NODE_COL === col) {\r\n        document.getElementById(`node-${row}-${col}`).className =\r\n          \"node node-start\";\r\n      } else if (FINISH_NODE_ROW === row && FINISH_NODE_COL === col) {\r\n        document.getElementById(`node-${row}-${col}`).className =\r\n          \"node node-finish\";\r\n      } else {\r\n        document.getElementById(`node-${row}-${col}`).className =\r\n          \"node node-empty\";\r\n      }\r\n      const newNode = {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n        timestamp: Date.now(),\r\n        f: Infinity,\r\n        g: Infinity,\r\n        h: Infinity\r\n      };\r\n      newGrid[row][col] = newNode;\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nexport const createNode = (row, col) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n    timestamp: Date.now(),\r\n    f: Infinity,\r\n    g: Infinity,\r\n    h: Infinity\r\n  };\r\n};\r\n\r\nexport const getNewGridWithWallsToggle = (grid, row, col) => {\r\n  if (grid[row][col].isStart || grid[row][col].isFinish) return null;\r\n  const newGrid = grid.slice();\r\n\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n    isVisited: false,\r\n    distance: Infinity,\r\n    previousNode: null,\r\n    timestamp: Date.now()\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nexport const getNewGridWithStartNodeMove = (\r\n  grid,\r\n  row,\r\n  col,\r\n  prevStartRow,\r\n  prevStartCol\r\n) => {\r\n  const newGrid = grid.slice();\r\n  if (newGrid[row][col].isFinish) return null;\r\n  const node = newGrid[prevStartRow][prevStartCol];\r\n  const newPrevNode = { ...node, isStart: false, timestamp: Date.now() };\r\n\r\n  if (newPrevNode.isWall) {\r\n    document.getElementById(`node-${prevStartRow}-${prevStartCol}`).className =\r\n      \"node node-wall\";\r\n  } else {\r\n    document.getElementById(`node-${prevStartRow}-${prevStartCol}`).className =\r\n      \"node node-empty\";\r\n  }\r\n  const node2 = newGrid[row][col];\r\n  const newNode = {\r\n    ...node2,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    previousNode: null,\r\n    isStart: true,\r\n    timestamp: Date.now()\r\n  };\r\n  document.getElementById(`node-${row}-${col}`).className = \"node node-start\";\r\n  newGrid[prevStartRow][prevStartCol] = newPrevNode;\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nexport const getNewGridWithEndNodeMove = (\r\n  grid,\r\n  row,\r\n  col,\r\n  prevStartRow,\r\n  prevStartCol\r\n) => {\r\n  const newGrid = grid.slice();\r\n  if (newGrid[row][col].isStart) return null;\r\n  const node = newGrid[prevStartRow][prevStartCol];\r\n  const newPrevNode = { ...node, isFinish: false, timestamp: Date.now() };\r\n  if (newPrevNode.isWall) {\r\n    document.getElementById(`node-${prevStartRow}-${prevStartCol}`).className =\r\n      \"node node-wall\";\r\n  } else {\r\n    document.getElementById(`node-${prevStartRow}-${prevStartCol}`).className =\r\n      \"node node-empty\";\r\n  }\r\n  const node2 = newGrid[row][col];\r\n  const newNode = {\r\n    ...node2,\r\n    isFinish: true,\r\n    isVisited: false,\r\n    previousNode: null,\r\n    distance: Infinity,\r\n    timestamp: Date.now()\r\n  };\r\n  document.getElementById(`node-${row}-${col}`).className = \"node node-finish\";\r\n  newGrid[prevStartRow][prevStartCol] = newPrevNode;\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","export function aStarSearch(grid, startNode, finishNode, ROW_COUNT, COL_COUNT) {\r\n  const openList = [];\r\n  const closedList = [];\r\n  const closedListInOrder = [];\r\n  var currNode;\r\n  for (let i = 0; i < ROW_COUNT; i++) {\r\n    const row = [];\r\n    for (let j = 0; j < COL_COUNT; j++) {\r\n      row.push(false);\r\n    }\r\n    closedList.push(row);\r\n  }\r\n  startNode.f = 0;\r\n  startNode.g = 0;\r\n  startNode.h = 0;\r\n\r\n  openList.push(startNode);\r\n  var foundEnd = false;\r\n\r\n  while (openList.length !== 0) {\r\n    if (openList.length > 0) {\r\n      openList.sort(function(a, b) {\r\n        return a.f - b.f;\r\n      });\r\n    }\r\n    currNode = openList.shift();\r\n\r\n    closedList[currNode.row][currNode.col] = true;\r\n    closedListInOrder.push(currNode);\r\n\r\n    //North case\r\n    if (isValid(currNode.row - 1, currNode.col, ROW_COUNT, COL_COUNT)) {\r\n      if (isEnding(currNode.row - 1, currNode.col, grid)) {\r\n        foundEnd = true;\r\n        grid[currNode.row - 1][currNode.col].previousNode = currNode;\r\n\r\n        break;\r\n      } else if (\r\n        !closedList[currNode.row - 1][currNode.col] &&\r\n        !isBlocked(currNode.row - 1, currNode.col, grid)\r\n      ) {\r\n        const gNew = currNode.g + 1.0;\r\n        const hNew = calculateHValueManhattan(\r\n          grid[currNode.row - 1][currNode.col],\r\n          finishNode\r\n        );\r\n        const fNew = gNew + hNew;\r\n\r\n        if (\r\n          grid[currNode.row - 1][currNode.col].f === Infinity ||\r\n          grid[currNode.row - 1][currNode.col].f > fNew\r\n        ) {\r\n          //Not in Open List add it\r\n          //update Values\r\n          openList.push(grid[currNode.row - 1][currNode.col]);\r\n          grid[currNode.row - 1][currNode.col].f = fNew;\r\n          grid[currNode.row - 1][currNode.col].g = gNew;\r\n          grid[currNode.row - 1][currNode.col].h = hNew;\r\n          grid[currNode.row - 1][currNode.col].previousNode = currNode;\r\n        }\r\n      }\r\n    }\r\n\r\n    //South Case\r\n    if (isValid(currNode.row + 1, currNode.col, ROW_COUNT, COL_COUNT)) {\r\n      if (isEnding(currNode.row + 1, currNode.col, grid)) {\r\n        foundEnd = true;\r\n        grid[currNode.row + 1][currNode.col].previousNode = currNode;\r\n\r\n        break;\r\n      } else if (\r\n        !closedList[currNode.row + 1][currNode.col] &&\r\n        !isBlocked(currNode.row + 1, currNode.col, grid)\r\n      ) {\r\n        const gNew = currNode.g + 1.0;\r\n        const hNew = calculateHValueManhattan(\r\n          grid[currNode.row + 1][currNode.col],\r\n          finishNode\r\n        );\r\n        const fNew = gNew + hNew;\r\n\r\n        if (\r\n          grid[currNode.row + 1][currNode.col].f === Infinity ||\r\n          grid[currNode.row + 1][currNode.col].f > fNew\r\n        ) {\r\n          //Not in Open List add it\r\n          //update Values\r\n          openList.push(grid[currNode.row + 1][currNode.col]);\r\n          grid[currNode.row + 1][currNode.col].f = fNew;\r\n          grid[currNode.row + 1][currNode.col].g = gNew;\r\n          grid[currNode.row + 1][currNode.col].h = hNew;\r\n          grid[currNode.row + 1][currNode.col].previousNode = currNode;\r\n        }\r\n      }\r\n    }\r\n\r\n    //East Case\r\n    if (isValid(currNode.row, currNode.col + 1, ROW_COUNT, COL_COUNT)) {\r\n      if (isEnding(currNode.row, currNode.col + 1, grid)) {\r\n        foundEnd = true;\r\n        grid[currNode.row][currNode.col + 1].previousNode = currNode;\r\n\r\n        break;\r\n      } else if (\r\n        !closedList[currNode.row][currNode.col + 1] &&\r\n        !isBlocked(currNode.row, currNode.col + 1, grid)\r\n      ) {\r\n        const gNew = currNode.g + 1.0;\r\n        const hNew = calculateHValueManhattan(\r\n          grid[currNode.row][currNode.col + 1],\r\n          finishNode\r\n        );\r\n        const fNew = gNew + hNew;\r\n\r\n        if (\r\n          grid[currNode.row][currNode.col + 1].f === Infinity ||\r\n          grid[currNode.row][currNode.col + 1].f > fNew\r\n        ) {\r\n          //Not in Open List add it\r\n          //update Values\r\n          openList.push(grid[currNode.row][currNode.col + 1]);\r\n          grid[currNode.row][currNode.col + 1].f = fNew;\r\n          grid[currNode.row][currNode.col + 1].g = gNew;\r\n          grid[currNode.row][currNode.col + 1].h = hNew;\r\n          grid[currNode.row][currNode.col + 1].previousNode = currNode;\r\n        }\r\n      }\r\n    }\r\n\r\n    //West Case\r\n    if (isValid(currNode.row, currNode.col - 1, ROW_COUNT, COL_COUNT)) {\r\n      if (isEnding(currNode.row, currNode.col - 1, grid)) {\r\n        foundEnd = true;\r\n        grid[currNode.row][currNode.col - 1].previousNode = currNode;\r\n\r\n        break;\r\n      } else if (\r\n        !closedList[currNode.row][currNode.col - 1] &&\r\n        !isBlocked(currNode.row, currNode.col - 1, grid)\r\n      ) {\r\n        const gNew = currNode.g + 1.0;\r\n        const hNew = calculateHValueManhattan(\r\n          grid[currNode.row][currNode.col - 1],\r\n          finishNode\r\n        );\r\n        const fNew = gNew + hNew;\r\n\r\n        if (\r\n          grid[currNode.row][currNode.col - 1].f === Infinity ||\r\n          grid[currNode.row][currNode.col - 1].f > fNew\r\n        ) {\r\n          //Not in Open List add it\r\n          //update Values\r\n          openList.push(grid[currNode.row][currNode.col - 1]);\r\n          grid[currNode.row][currNode.col - 1].f = fNew;\r\n          grid[currNode.row][currNode.col - 1].g = gNew;\r\n          grid[currNode.row][currNode.col - 1].h = hNew;\r\n          grid[currNode.row][currNode.col - 1].previousNode = currNode;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!foundEnd) return null;\r\n  else {\r\n    closedListInOrder.push(finishNode);\r\n    return closedListInOrder;\r\n  }\r\n}\r\n\r\nfunction isValid(i, j, ROW_COUNT, COL_COUNT) {\r\n  return i >= 0 && j >= 0 && i < ROW_COUNT && j < COL_COUNT ? true : false;\r\n}\r\n\r\nfunction isBlocked(i, j, grid) {\r\n  return grid[i][j].isWall ? true : false;\r\n}\r\n\r\nfunction isEnding(i, j, grid) {\r\n  return grid[i][j].isFinish ? true : false;\r\n}\r\n\r\nfunction calculateHValueManhattan(curNode, finishNode) {\r\n  return (\r\n    Math.abs(curNode.row - finishNode.row) +\r\n    Math.abs(curNode.col - finishNode.col)\r\n  );\r\n}\r\n","\r\n\r\nexport function buildRecursiveMaze(grid, startNode, endNode, ROW_COUNT, COL_COUNT) {\r\n  //Paint all the borders\r\n  //call recursive Maze\r\n  var wallsNodeOrder = [];\r\n\r\n  for (let col = 0; col < COL_COUNT; col++) {\r\n    wallsNodeOrder.push(grid[0][col]);\r\n  }\r\n  var colIndex = 0;\r\n  for (let row = 0; row < ROW_COUNT - 1; row++) {\r\n    wallsNodeOrder.push(grid[row][colIndex]);\r\n    if (row === ROW_COUNT - 2 && colIndex === 0) {\r\n      row = 0;\r\n      colIndex = COL_COUNT - 1;\r\n    }\r\n  }\r\n  for (let col = 0; col < COL_COUNT; col++) {\r\n    wallsNodeOrder.push(grid[ROW_COUNT - 1][col]);\r\n  }\r\n\r\n  recursiveMaze(\r\n    grid,\r\n    startNode,\r\n    endNode,\r\n    COL_COUNT - 2,\r\n    ROW_COUNT - 2,\r\n    1,\r\n    1,\r\n    wallsNodeOrder\r\n  );\r\n\r\n  return wallsNodeOrder;\r\n}\r\n\r\nfunction recursiveMaze(\r\n  grid,\r\n  startNode,\r\n  endNode,\r\n  maxCol,\r\n  maxRow,\r\n  minCol,\r\n  minRow,\r\n  wallsNodeOrder,\r\n  prevDirection,\r\n  invalidNode\r\n) {\r\n  if (maxCol - minCol < 2 || maxRow - minRow < 2) return;\r\n  const horizontalChance = [0, 1];\r\n  var isHorizontal = Math.floor(Math.random() * horizontalChance.length);\r\n  if (prevDirection) {\r\n    isHorizontal = !prevDirection;\r\n  }\r\n  //const isHorizontal =0;\r\n  var pos = selectRandomNode(\r\n    grid,\r\n    isHorizontal,\r\n    maxCol,\r\n    maxRow,\r\n    minCol,\r\n    minRow,\r\n    prevDirection,\r\n    invalidNode\r\n  );\r\n  if (pos === null) {\r\n    isHorizontal = !isHorizontal;\r\n    pos = selectRandomNode(\r\n      grid,\r\n      isHorizontal,\r\n      maxCol,\r\n      maxRow,\r\n      minCol,\r\n      minRow,\r\n      prevDirection,\r\n      invalidNode\r\n    );\r\n  }\r\n\r\n  const opening = selectRandomOpening(\r\n    grid,\r\n    maxCol,\r\n    maxRow,\r\n    minCol,\r\n    minRow,\r\n    isHorizontal\r\n  );\r\n\r\n  if (isHorizontal) {\r\n    for (let col = minCol; col <= maxCol; col++) {\r\n      if (col !== opening) wallsNodeOrder.push(grid[pos][col]);\r\n    }\r\n    recursiveMaze(\r\n      grid,\r\n      startNode,\r\n      endNode,\r\n      maxCol,\r\n      pos - 1,\r\n      minCol,\r\n      minRow,\r\n      wallsNodeOrder,\r\n      isHorizontal,\r\n      opening\r\n    );\r\n\r\n    recursiveMaze(\r\n      grid,\r\n      startNode,\r\n      endNode,\r\n      maxCol,\r\n      maxRow,\r\n      minCol,\r\n      pos + 1,\r\n      wallsNodeOrder,\r\n      isHorizontal,\r\n      opening\r\n    );\r\n  } else {\r\n    for (let row = minRow; row <= maxRow; row++) {\r\n      if (row !== opening) wallsNodeOrder.push(grid[row][pos]);\r\n    }\r\n    recursiveMaze(\r\n      grid,\r\n      startNode,\r\n      endNode,\r\n      maxCol,\r\n      maxRow,\r\n      pos + 1,\r\n      minRow,\r\n      wallsNodeOrder,\r\n      isHorizontal,\r\n      opening\r\n    );\r\n\r\n    recursiveMaze(\r\n      grid,\r\n      startNode,\r\n      endNode,\r\n      pos - 1,\r\n      maxRow,\r\n      minCol,\r\n      minRow,\r\n      wallsNodeOrder,\r\n      isHorizontal,\r\n      opening\r\n    );\r\n  }\r\n}\r\n\r\nfunction selectRandomNode(\r\n  grid,\r\n  isHorizontal,\r\n  maxCol,\r\n  maxRow,\r\n  minCol,\r\n  minRow,\r\n  prevDirection,\r\n  invalidNode\r\n) {\r\n  var rowPos;\r\n  var colPos;\r\n  var options;\r\n  var indexPos;\r\n  var offLoop = true;\r\n  if (isHorizontal) {\r\n    options = pairsFromRange(minRow, maxRow);\r\n    indexPos = Math.floor(Math.random() * options.length);\r\n    rowPos = options[indexPos];\r\n    if (\r\n      validPos(\r\n        grid,\r\n        rowPos,\r\n        colPos,\r\n        maxCol,\r\n        maxRow,\r\n        minCol,\r\n        minRow,\r\n        isHorizontal,\r\n        prevDirection,\r\n        invalidNode\r\n      )\r\n    ) {\r\n      return rowPos;\r\n    }\r\n\r\n    while (offLoop) {\r\n      if (options.length === 0) return null;\r\n      if (\r\n        validPos(\r\n          grid,\r\n          rowPos,\r\n          colPos,\r\n          maxCol,\r\n          maxRow,\r\n          minCol,\r\n          minRow,\r\n          isHorizontal,\r\n          prevDirection,\r\n          invalidNode\r\n        )\r\n      ) {\r\n        offLoop = false;\r\n      } else {\r\n        for (let i = 0; i < options.length; i++) {\r\n          if (i === indexPos) {\r\n            options.splice(i, 1);\r\n            i--;\r\n          }\r\n        }\r\n        indexPos = Math.floor(Math.random() * options.length);\r\n        rowPos = options[indexPos];\r\n      }\r\n    }\r\n\r\n    return rowPos;\r\n  } else {\r\n    options = pairsFromRange(minCol, maxCol);\r\n    indexPos = Math.floor(Math.random() * options.length);\r\n    colPos = options[indexPos];\r\n    if (\r\n      validPos(\r\n        grid,\r\n        rowPos,\r\n        colPos,\r\n        maxCol,\r\n        maxRow,\r\n        minCol,\r\n        minRow,\r\n        isHorizontal,\r\n        prevDirection,\r\n        invalidNode\r\n      )\r\n    ) {\r\n      return colPos;\r\n    }\r\n\r\n    while (offLoop) {\r\n      if (options.length === 0) return null;\r\n      if (\r\n        validPos(\r\n          grid,\r\n          rowPos,\r\n          colPos,\r\n          maxCol,\r\n          maxRow,\r\n          minCol,\r\n          minRow,\r\n          isHorizontal,\r\n          prevDirection,\r\n          invalidNode\r\n        )\r\n      ) {\r\n        offLoop = false;\r\n      } else {\r\n        for (let i = 0; i < options.length; i++) {\r\n          if (i === indexPos) {\r\n            options.splice(i, 1);\r\n            i--;\r\n          }\r\n        }\r\n        indexPos = Math.floor(Math.random() * options.length);\r\n        colPos = options[indexPos];\r\n      }\r\n    }\r\n\r\n    return colPos;\r\n  }\r\n}\r\nfunction selectRandomOpening(\r\n  grid,\r\n  maxCol,\r\n  maxRow,\r\n  minCol,\r\n  minRow,\r\n  isHorizontal\r\n) {\r\n  var allRange = [];\r\n  var indexPos;\r\n  if (isHorizontal) {\r\n    for (let i = minCol; i < maxCol; i++) {\r\n      if (i % 2 === 0) continue;\r\n      allRange.push(i);\r\n    }\r\n    indexPos = allRange[Math.floor(Math.random() * allRange.length)];\r\n    return indexPos;\r\n  } else {\r\n    for (let i = minRow; i < maxRow; i++) {\r\n      if (i % 2 === 0) continue;\r\n      allRange.push(i);\r\n    }\r\n    indexPos = allRange[Math.floor(Math.random() * allRange.length)];\r\n\r\n    return indexPos;\r\n  }\r\n}\r\n\r\nfunction validPos(\r\n  grid,\r\n  row,\r\n  col,\r\n  maxCol,\r\n  maxRow,\r\n  minCol,\r\n  minRow,\r\n  isHorizontal,\r\n  prevDirection,\r\n  invalidNode\r\n) {\r\n  if (isHorizontal) {\r\n    if (isHorizontal ^ prevDirection) {\r\n      if (row === invalidNode) return false;\r\n    }\r\n    if ((maxRow - row) % 2 === 1 && (row - minRow) % 2 === 1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  } else {\r\n    if (isHorizontal ^ prevDirection) {\r\n      if (col === invalidNode) return false;\r\n    }\r\n    if ((maxCol - col) % 2 === 1 && (col - minCol) % 2 === 1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction pairsFromRange(min, max) {\r\n  var pairArray = [];\r\n  for (let i = min; i <= max; i++) {\r\n    if (i % 2 === 0) pairArray.push(i);\r\n  }\r\n\r\n  return pairArray;\r\n}\r\n","export function dfsSearch(\r\n  grid,\r\n  startNode,\r\n  finishNode,\r\n  ROW_COUNT,\r\n  COL_COUNT,\r\n  isRandom\r\n) {\r\n  for (let row = 0; row < ROW_COUNT; row++) {\r\n    for (let col = 0; col < COL_COUNT; col++) {\r\n      if (!grid[row][col].isWall) {\r\n        grid[row][col].isVisited = false;\r\n        grid[row][col].previousNode = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  var sortedVisistedNodes = dfsUtil(\r\n    grid,\r\n    startNode,\r\n    finishNode,\r\n    ROW_COUNT,\r\n    COL_COUNT,\r\n    isRandom\r\n  );\r\n  return sortedVisistedNodes;\r\n}\r\n\r\nfunction dfsUtil(grid, node, finishNode, ROW_COUNT, COL_COUNT, isRandom) {\r\n  var neighbors = [];\r\n  var curNode;\r\n  var sortedVisistedNodes = [];\r\n  neighbors.push(node);\r\n  while (neighbors.length !== 0) {\r\n    curNode = neighbors.pop();\r\n    curNode.isVisited = true;\r\n    sortedVisistedNodes.push(curNode);\r\n    if (isEnding(curNode, finishNode)) return sortedVisistedNodes;\r\n    var ns = getNeighbors(grid, curNode, ROW_COUNT, COL_COUNT, isRandom);\r\n    //console.log(\"NEI of \", curNode.row, curNode.col, \"== \", ns);\r\n    ns.forEach(function(arrayItem) {\r\n      neighbors.push(arrayItem);\r\n    });\r\n  }\r\n  return sortedVisistedNodes;\r\n}\r\n\r\nfunction isEnding(curNode, finishNode) {\r\n  if (curNode.row === finishNode.row && curNode.col === finishNode.col)\r\n    return true;\r\n  return false;\r\n}\r\n\r\nfunction getNeighbors(grid, node, ROW_COUNT, COL_COUNT, isRandom) {\r\n  var neighbors = [];\r\n  //Right\r\n  if (\r\n    isValid(node.row + 1, node.col, ROW_COUNT, COL_COUNT) &&\r\n    !isBlocked(node.row + 1, node.col, grid) &&\r\n    !isVisited(node.row + 1, node.col, grid)\r\n  ) {\r\n    neighbors.push(grid[node.row + 1][node.col]);\r\n  }\r\n  //Left\r\n  if (\r\n    isValid(node.row - 1, node.col, ROW_COUNT, COL_COUNT) &&\r\n    !isBlocked(node.row - 1, node.col, grid) &&\r\n    !isVisited(node.row - 1, node.col, grid)\r\n  ) {\r\n    neighbors.push(grid[node.row - 1][node.col]);\r\n  }\r\n  //Top\r\n  if (\r\n    isValid(node.row, node.col + 1, ROW_COUNT, COL_COUNT) &&\r\n    !isBlocked(node.row, node.col + 1, grid) &&\r\n    !isVisited(node.row, node.col + 1, grid)\r\n  ) {\r\n    neighbors.push(grid[node.row][node.col + 1]);\r\n  }\r\n  //Bot\r\n  if (\r\n    isValid(node.row, node.col - 1, ROW_COUNT, COL_COUNT) &&\r\n    !isBlocked(node.row, node.col - 1, grid) &&\r\n    !isVisited(node.row, node.col - 1, grid)\r\n  ) {\r\n    neighbors.push(grid[node.row][node.col - 1]);\r\n  }\r\n  if (isRandom) return shuffle(neighbors);\r\n  else return neighbors;\r\n}\r\n\r\nfunction isValid(i, j, ROW_COUNT, COL_COUNT) {\r\n  return i >= 0 && j >= 0 && i < ROW_COUNT && j < COL_COUNT ? true : false;\r\n}\r\n\r\nfunction isBlocked(i, j, grid) {\r\n  return grid[i][j].isWall ? true : false;\r\n}\r\n\r\nfunction isVisited(i, j, grid) {\r\n  return grid[i][j].isVisited;\r\n}\r\n\r\nfunction shuffle(array) {\r\n  array.sort(() => Math.random() - 0.5);\r\n  return array;\r\n}\r\n","export function buildSimpleMaze(grid, ROW_COUNT, COL_COUNT) {\r\n  var wallsNodeOrder = [];\r\n  for (let row = 0; row < ROW_COUNT; row++) {\r\n    for (let col = 0; col < COL_COUNT; col++) {\r\n      if (isWallMade()) wallsNodeOrder.push(grid[row][col]);\r\n    }\r\n  }\r\n  return wallsNodeOrder;\r\n}\r\n\r\nfunction isWallMade() {\r\n  if (Math.random() >= 0.7) return true;\r\n  return false;\r\n}\r\n","export function bfsSearch(grid, startNode, finishNode) {\r\n    //1. Mark all nodes unvisited - Set of unvisited Nodes\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    //3. set tentative distances\r\n    \r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n  \r\n      const closestNode = unvisitedNodes.shift();\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      //If wall skip it\r\n      if (closestNode.isWall && !closestNode.isStart) continue;\r\n  \r\n      //5. If dest node is dist Infinity or visisted Stop\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n  \r\n      //4. when done mark current as visited\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n  \r\n      \r\n  \r\n      //6. Oc. select unvisisted node and repeat\r\n      updateUnvisistedNeighbors(closestNode, grid);\r\n    }\r\n    return visitedNodesInOrder;\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function updateUnvisistedNeighbors(closestNode, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(closestNode, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = closestNode.distance + 1;\r\n      neighbor.previousNode = closestNode;\r\n    }\r\n  }\r\n  \r\n  export function getShortestPath(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  ","import React, { Component } from \"react\";\r\n\r\nimport Node from \"./node.jsx\";\r\n\r\nimport \"./grid.css\";\r\nimport { dijkstra, getShortestPath } from \"../../../services/dijkstra.js\";\r\nimport {\r\n  VisualizeContext,\r\n  DIJKSTRA,\r\n  ASTAR,\r\n  BFS,\r\n  DFS,\r\n  RECURSIVEMAZE,\r\n  SIMPLEMAZE,\r\n  RANDOMDFS,\r\n  STAIRCASEMAZE\r\n} from \"../../../context/selectionContext.js\";\r\nimport {\r\n  createGrid,\r\n  clearGrid,\r\n  getNewGridWithEndNodeMove,\r\n  getNewGridWithStartNodeMove,\r\n  getNewGridWithWallsToggle,\r\n  START_NODE_ROW,\r\n  FINISH_NODE_ROW,\r\n  START_NODE_COL,\r\n  FINISH_NODE_COL,\r\n  reCreateGrid\r\n} from \"./gridHelpers\";\r\n\r\nimport moment from \"moment\";\r\nimport { aStarSearch } from \"../../../services/astar.js\";\r\nimport { buildRecursiveMaze } from \"../../../services/mazes/recursiveMaze.js\";\r\nimport { dfsSearch } from \"../../../services/dfs.js\";\r\nimport { buildSimpleMaze } from \"../../../services/mazes/simpleMaze.js\";\r\nimport { buildStairCaseMaze } from \"../../../services/mazes/staircase.js\";\r\nimport { bfsSearch } from \"../../../services/bfs.js\";\r\n\r\nexport default class GridView extends Component {\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (\r\n      prevState.available &&\r\n      (nextProps.col_count !== prevState.COL_COUNT ||\r\n        nextProps.row_count !== prevState.ROW_COUNT)\r\n    ) {\r\n      return {\r\n        ...prevState,\r\n        COL_COUNT: nextProps.col_count,\r\n        ROW_COUNT: nextProps.row_count,\r\n        grid: reCreateGrid(\r\n          nextProps.row_count,\r\n          nextProps.col_count,\r\n          prevState.curStartPos,\r\n          prevState.curEndPos\r\n        )\r\n      };\r\n    } else {\r\n      return prevState;\r\n    }\r\n  }\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: createGrid(this.props.row_count, this.props.col_count),\r\n      mousePressed: false,\r\n      wallDrawing: false,\r\n      moveStartNode: false,\r\n      moveEndNode: false,\r\n      curStartPos: [START_NODE_ROW, START_NODE_COL],\r\n      curEndPos: [FINISH_NODE_ROW, FINISH_NODE_COL],\r\n      computed: false,\r\n      available: true,\r\n      curAlgorithm: \"\",\r\n      ROW_COUNT: this.props.row_count,\r\n      COL_COUNT: this.props.col_count\r\n    };\r\n  }\r\n\r\n  clear() {\r\n    this.setState({\r\n      grid: clearGrid(\r\n        this.state.grid,\r\n        this.state.ROW_COUNT,\r\n        this.state.COL_COUNT\r\n      ),\r\n      mousePressed: false,\r\n      wallDrawing: false,\r\n      moveStartNode: false,\r\n      moveEndNode: false,\r\n      curStartPos: [START_NODE_ROW, START_NODE_COL],\r\n      curEndPos: [FINISH_NODE_ROW, FINISH_NODE_COL],\r\n      computed: false,\r\n      available: true,\r\n      curAlgorithm: \"\"\r\n    });\r\n  }\r\n\r\n  clearWalls() {\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < this.state.ROW_COUNT; row++) {\r\n      for (let col = 0; col < this.state.COL_COUNT; col++) {\r\n        if (\r\n          grid[row][col].isStart ||\r\n          grid[row][col].isFinish ||\r\n          grid[row][col].isVisited\r\n        )\r\n          continue;\r\n        else {\r\n          if (grid[row][col].isWall) {\r\n            grid[row][col].isWall = !grid[row][col].isWall;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              \"node node-empty\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearPath() {\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < this.state.ROW_COUNT; row++) {\r\n      for (let col = 0; col < this.state.COL_COUNT; col++) {\r\n        if (\r\n          grid[row][col].isVisited &&\r\n          !grid[row][col].isStart &&\r\n          !grid[row][col].isFinish\r\n        ) {\r\n          grid[row][col].isVisited = !grid[row][col].isVisited;\r\n          document.getElementById(`node-${row}-${col}`).className =\r\n            \"node node-empty\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseDown(row, col, enableVisualize) {\r\n    if (enableVisualize || !this.state.available) return;\r\n    if (this.state.grid[row][col].isStart) {\r\n      //Move start nodes\r\n      this.setState({ mousePressed: true, moveStartNode: true });\r\n    } else if (this.state.grid[row][col].isFinish) {\r\n      //Move end nodes\r\n      this.setState({ mousePressed: true, moveEndNode: true });\r\n    } else {\r\n      //Make walls\r\n      const newGrid = getNewGridWithWallsToggle(this.state.grid, row, col);\r\n      if (newGrid === null) return;\r\n      this.setState({ grid: newGrid, mousePressed: true, wallDrawing: true });\r\n    }\r\n  }\r\n  handleMouseEnter(row, col, enableVisualize) {\r\n    //console.log(`mouse enter ${this.state.mousePressed}`, row, col);\r\n    if (!this.state.mousePressed || enableVisualize || !this.state.available)\r\n      return;\r\n    if (\r\n      moment(Date.now()).diff(\r\n        moment(this.state.grid[row][col].timestamp),\r\n        \"milisecond\"\r\n      ) < 200\r\n    )\r\n      return;\r\n    if (this.state.moveStartNode) {\r\n      const newGrid = getNewGridWithStartNodeMove(\r\n        this.state.grid,\r\n        row,\r\n        col,\r\n        this.state.curStartPos[0],\r\n        this.state.curStartPos[1]\r\n      );\r\n      if (newGrid != null)\r\n        this.setState({ grid: newGrid, curStartPos: [row, col] }, () => {\r\n          if (this.state.computed) {\r\n            this.reCalculateGrid();\r\n          }\r\n        });\r\n    } else if (this.state.moveEndNode) {\r\n      const newGrid = getNewGridWithEndNodeMove(\r\n        this.state.grid,\r\n        row,\r\n        col,\r\n        this.state.curEndPos[0],\r\n        this.state.curEndPos[1]\r\n      );\r\n      if (newGrid != null)\r\n        this.setState({ grid: newGrid, curEndPos: [row, col] }, () => {\r\n          if (this.state.computed) {\r\n            this.reCalculateGrid();\r\n          }\r\n        });\r\n    } else if (this.state.wallDrawing) {\r\n      const newGrid = getNewGridWithWallsToggle(this.state.grid, row, col);\r\n      if (newGrid === null) return;\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n  handleMouseUp() {\r\n    if (this.state.mousePressed)\r\n      this.setState({\r\n        mousePressed: false,\r\n        wallDrawing: false,\r\n        moveStartNode: false,\r\n        moveEndNode: false\r\n      });\r\n  }\r\n\r\n  reCalculateGrid() {\r\n    console.log(this.state.curAlgorithm);\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < this.state.ROW_COUNT; row++) {\r\n      for (let col = 0; col < this.state.COL_COUNT; col++) {\r\n        grid[row][col].distance = Infinity;\r\n        grid[row][col].isVisited = false;\r\n        grid[row][col].f = Infinity;\r\n        grid[row][col].g = Infinity;\r\n        grid[row][col].h = Infinity;\r\n      }\r\n    }\r\n    var startPos = this.state.curStartPos;\r\n    var endPos = this.state.curEndPos;\r\n    const startNode = grid[startPos[0]][startPos[1]];\r\n    const finishNode = grid[endPos[0]][endPos[1]];\r\n    var visitedNodesInOrder;\r\n    if (\r\n      this.state.curAlgorithm === DIJKSTRA ||\r\n      this.state.curAlgorithm === ASTAR ||\r\n      this.state.curAlgorithm === BFS\r\n    ) {\r\n      if (this.state.curAlgorithm === DIJKSTRA) {\r\n        visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      } else if (this.state.curAlgorithm === ASTAR) {\r\n        visitedNodesInOrder = aStarSearch(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          this.state.ROW_COUNT,\r\n          this.state.COL_COUNT\r\n        );\r\n      } else if (this.state.curAlgorithm === BFS) {\r\n        visitedNodesInOrder = bfsSearch(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          this.state.ROW_COUNT,\r\n          this.state.COL_COUNT\r\n        );\r\n      }\r\n      const shortestPath = getShortestPath(finishNode);\r\n      if (!visitedNodesInOrder) return;\r\n      for (const node of visitedNodesInOrder) {\r\n        if (!node.isStart && !node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n        }\r\n      }\r\n      for (const node of shortestPath) {\r\n        if (!node.isStart && !node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path\";\r\n        }\r\n      }\r\n\r\n      for (let row = 0; row < this.state.ROW_COUNT; row++) {\r\n        for (let col = 0; col < this.state.COL_COUNT; col++) {\r\n          if (\r\n            !shortestPath.includes(this.state.grid[row][col]) &&\r\n            !visitedNodesInOrder.includes(this.state.grid[row][col])\r\n          ) {\r\n            if (this.state.grid[row][col].isWall) {\r\n              document.getElementById(`node-${row}-${col}`).className =\r\n                \"node node-wall\";\r\n            } else {\r\n              document.getElementById(`node-${row}-${col}`).className =\r\n                \"node node-empty\";\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      if (this.state.curAlgorithm === DFS) {\r\n        visitedNodesInOrder = dfsSearch(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          this.state.ROW_COUNT,\r\n          this.state.COL_COUNT,\r\n          false\r\n        );\r\n      } else {\r\n        visitedNodesInOrder = dfsSearch(\r\n          grid,\r\n          startNode,\r\n          finishNode,\r\n          this.state.ROW_COUNT,\r\n          this.state.COL_COUNT,\r\n          true\r\n        );\r\n      }\r\n\r\n      for (const node of visitedNodesInOrder) {\r\n        if (!node.isStart && !node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path\";\r\n        }\r\n      }\r\n      for (let row = 0; row < this.state.ROW_COUNT; row++) {\r\n        for (let col = 0; col < this.state.COL_COUNT; col++) {\r\n          if (!visitedNodesInOrder.includes(this.state.grid[row][col])) {\r\n            if (this.state.grid[row][col].isWall) {\r\n              document.getElementById(`node-${row}-${col}`).className =\r\n                \"node node-wall\";\r\n            } else {\r\n              document.getElementById(`node-${row}-${col}`).className =\r\n                \"node node-empty\";\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  animatePath(visitedNodesInOrder, shortestPath, toggleEnable) {\r\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(shortestPath, toggleEnable);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        if (!node.isStart && !node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited-animation\";\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder, toggleEnable) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if (!node.isStart && !node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path-animation\";\r\n        }\r\n        if (i === nodesInShortestPathOrder.length - 1) {\r\n          if (toggleEnable) toggleEnable();\r\n          this.setState({ computed: true, available: true });\r\n        }\r\n      }, 25 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra(toggleEnable) {\r\n    const { grid } = this.state;\r\n    var startPos = this.state.curStartPos;\r\n    var endPos = this.state.curEndPos;\r\n    const startNode = grid[startPos[0]][startPos[1]];\r\n    const finishNode = grid[endPos[0]][endPos[1]];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const shortestPath = getShortestPath(finishNode);\r\n    this.animatePath(visitedNodesInOrder, shortestPath, toggleEnable);\r\n  }\r\n\r\n  visualizeAstar(toggleEnable) {\r\n    const { grid, curStartPos, curEndPos } = this.state;\r\n    const startNode = grid[curStartPos[0]][curStartPos[1]];\r\n    const endNode = grid[curEndPos[0]][curEndPos[1]];\r\n\r\n    const v = aStarSearch(\r\n      grid,\r\n      startNode,\r\n      endNode,\r\n      this.state.ROW_COUNT,\r\n      this.state.COL_COUNT\r\n    );\r\n    const shortestPath = getShortestPath(endNode);\r\n    this.animatePath(v, shortestPath, toggleEnable);\r\n    /* this.animateShortestPath(shortestPath, toggleEnable); */\r\n  }\r\n\r\n  visualizeDFS(toggleEnable, randomDFS) {\r\n    const { grid, curStartPos, curEndPos } = this.state;\r\n    const startNode = grid[curStartPos[0]][curStartPos[1]];\r\n    const endNode = grid[curEndPos[0]][curEndPos[1]];\r\n\r\n    const v = dfsSearch(\r\n      grid,\r\n      startNode,\r\n      endNode,\r\n      this.state.ROW_COUNT,\r\n      this.state.COL_COUNT,\r\n      randomDFS\r\n    );\r\n    this.animateShortestPath(v, toggleEnable);\r\n    /* this.animateShortestPath(shortestPath, toggleEnable); */\r\n  }\r\n\r\n  visualizeBFS(toggleEnable) {\r\n    const { grid, curStartPos, curEndPos } = this.state;\r\n    const startNode = grid[curStartPos[0]][curStartPos[1]];\r\n    const endNode = grid[curEndPos[0]][curEndPos[1]];\r\n\r\n    const visitedNodesInOrder = bfsSearch(\r\n      grid,\r\n      startNode,\r\n      endNode,\r\n      this.state.ROW_COUNT,\r\n      this.state.COL_COUNT\r\n    );\r\n    const shortestPath = getShortestPath(endNode);\r\n    this.animatePath(visitedNodesInOrder, shortestPath, toggleEnable);\r\n  }\r\n\r\n  visualizeRecursiveMaze(toggleMaze) {\r\n    this.setState({ available: false });\r\n    const { grid, curStartPos, curEndPos } = this.state;\r\n    const startNode = grid[curStartPos[0]][curStartPos[1]];\r\n    const endNode = grid[curEndPos[0]][curEndPos[1]];\r\n    const wallNodes = buildRecursiveMaze(\r\n      grid,\r\n      startNode,\r\n      endNode,\r\n      this.state.ROW_COUNT,\r\n      this.state.COL_COUNT\r\n    );\r\n\r\n    for (let i = 0; i < wallNodes.length; i++) {\r\n      setTimeout(() => {\r\n        getNewGridWithWallsToggle(grid, wallNodes[i].row, wallNodes[i].col);\r\n        if (!wallNodes[i].isStart && !wallNodes[i].isFinish) {\r\n          document.getElementById(\r\n            `node-${wallNodes[i].row}-${wallNodes[i].col}`\r\n          ).className = \"node node-wall\";\r\n        }\r\n        if (i === wallNodes.length - 1) {\r\n          toggleMaze(null);\r\n          this.setState({ available: true });\r\n        }\r\n      }, i * 10);\r\n    }\r\n  }\r\n\r\n  visualizeSimpleMaze(toggleMaze) {\r\n    this.setState({ available: false });\r\n    const { grid } = this.state;\r\n    const wallNodes = buildSimpleMaze(\r\n      grid,\r\n      this.state.ROW_COUNT,\r\n      this.state.COL_COUNT\r\n    );\r\n\r\n    for (let i = 0; i < wallNodes.length; i++) {\r\n      setTimeout(() => {\r\n        getNewGridWithWallsToggle(grid, wallNodes[i].row, wallNodes[i].col);\r\n        if (!wallNodes[i].isStart && !wallNodes[i].isFinish) {\r\n          document.getElementById(\r\n            `node-${wallNodes[i].row}-${wallNodes[i].col}`\r\n          ).className = \"node node-wall\";\r\n        }\r\n        if (i === wallNodes.length - 1) {\r\n          toggleMaze(null);\r\n          this.setState({ available: true });\r\n        }\r\n      }, i * 10);\r\n    }\r\n  }\r\n\r\n  visualizeStairMaze(toggleMaze) {\r\n    this.setState({ available: false });\r\n    const { grid } = this.state;\r\n    const wallNodes = buildStairCaseMaze(\r\n      grid,\r\n      this.state.ROW_COUNT,\r\n      this.state.COL_COUNT\r\n    );\r\n\r\n    for (let i = 0; i < wallNodes.length; i++) {\r\n      setTimeout(() => {\r\n        getNewGridWithWallsToggle(grid, wallNodes[i].row, wallNodes[i].col);\r\n        if (!wallNodes[i].isStart && !wallNodes[i].isFinish) {\r\n          document.getElementById(\r\n            `node-${wallNodes[i].row}-${wallNodes[i].col}`\r\n          ).className = \"node node-wall\";\r\n        }\r\n        if (i === wallNodes.length - 1) {\r\n          toggleMaze(null);\r\n          this.setState({ available: true });\r\n        }\r\n      }, i * 10);\r\n    }\r\n  }\r\n\r\n  checkState(\r\n    enableVisualize,\r\n    algorithmSelected,\r\n    toggleEnable,\r\n    toggleClear,\r\n    clearBoard,\r\n    mazeSelected,\r\n    toggleMaze,\r\n    clearWalls,\r\n    toggleClearWalls,\r\n    clearPath,\r\n    toggleClearPath\r\n  ) {\r\n    if (!(mazeSelected === null) && this.state.available) {\r\n      if (mazeSelected === RECURSIVEMAZE)\r\n        setTimeout(() => {\r\n          this.clearWalls();\r\n          setTimeout(() => {\r\n            this.visualizeRecursiveMaze(toggleMaze);\r\n          }, 10);\r\n        }, 10);\r\n      else if (mazeSelected === SIMPLEMAZE) {\r\n        setTimeout(() => {\r\n          this.clearWalls();\r\n          setTimeout(() => {\r\n            this.visualizeSimpleMaze(toggleMaze);\r\n          }, 10);\r\n        }, 10);\r\n      } else if (mazeSelected === STAIRCASEMAZE) {\r\n        setTimeout(() => {\r\n          this.clearWalls();\r\n          setTimeout(() => {\r\n            this.visualizeStairMaze(toggleMaze);\r\n          }, 10);\r\n        }, 10);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (enableVisualize) {\r\n      if (algorithmSelected === DIJKSTRA) {\r\n        setTimeout(() => {\r\n          if (this.state.available) {\r\n            if (this.state.computed) {\r\n              this.clear();\r\n              this.setState({\r\n                available: false,\r\n                curAlgorithm: DIJKSTRA\r\n              });\r\n            } else {\r\n              this.setState({\r\n                available: false,\r\n                curAlgorithm: DIJKSTRA\r\n              });\r\n            }\r\n            this.visualizeDijkstra(toggleEnable);\r\n          }\r\n        }, 10);\r\n      } else if (algorithmSelected === ASTAR) {\r\n        setTimeout(() => {\r\n          if (this.state.available) {\r\n            if (this.state.computed) {\r\n              this.clear();\r\n              this.setState({\r\n                available: false,\r\n                curAlgorithm: ASTAR\r\n              });\r\n            } else {\r\n              this.setState({\r\n                available: false,\r\n                curAlgorithm: ASTAR\r\n              });\r\n            }\r\n            this.visualizeAstar(toggleEnable);\r\n          }\r\n        }, 10);\r\n      } else if (algorithmSelected === DFS || algorithmSelected === RANDOMDFS) {\r\n        setTimeout(() => {\r\n          if (this.state.available) {\r\n            if (this.state.computed) {\r\n              this.clear();\r\n              this.setState({\r\n                available: false,\r\n                curAlgorithm: algorithmSelected\r\n              });\r\n            } else {\r\n              this.setState({\r\n                available: false,\r\n                curAlgorithm: algorithmSelected\r\n              });\r\n            }\r\n            if (algorithmSelected === RANDOMDFS)\r\n              this.visualizeDFS(toggleEnable, true);\r\n            else this.visualizeDFS(toggleEnable, false);\r\n          }\r\n        }, 10);\r\n      } else if (algorithmSelected === BFS) {\r\n        setTimeout(() => {\r\n          if (this.state.available) {\r\n            if (this.state.computed) {\r\n              this.clear();\r\n              this.setState({\r\n                available: false,\r\n                curAlgorithm: algorithmSelected\r\n              });\r\n            } else {\r\n              this.setState({\r\n                available: false,\r\n                curAlgorithm: algorithmSelected\r\n              });\r\n            }\r\n            this.visualizeBFS(toggleEnable, false);\r\n          }\r\n        }, 10);\r\n      } else {\r\n        setTimeout(() => {\r\n          toggleEnable();\r\n        }, 10);\r\n      }\r\n    } else if (clearBoard) {\r\n      setTimeout(() => {\r\n        toggleClear();\r\n        this.clear();\r\n      }, 10);\r\n    } else if (clearPath) {\r\n      setTimeout(() => {\r\n        toggleClearPath();\r\n        this.clearPath();\r\n        setTimeout(() => {\r\n          this.setState({\r\n            available: true,\r\n            curAlgorithm: algorithmSelected,\r\n            computed: false\r\n          });\r\n        }, 10);\r\n      }, 10);\r\n    } else if (clearWalls) {\r\n      setTimeout(() => {\r\n        toggleClearWalls();\r\n        this.clearWalls();\r\n        console.log(\"DASD\", this.state.curAlgorithm);\r\n        if (\r\n          this.state.curAlgorithm !== null &&\r\n          this.state.curAlgorithm !== \"\"\r\n        ) {\r\n          this.setState({}, () => {\r\n            this.reCalculateGrid();\r\n          });\r\n        }\r\n      }, 10);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const renderGrid = this.state.grid;\r\n    return (\r\n      <VisualizeContext.Consumer>\r\n        {({\r\n          enableVisualize,\r\n          algorithmSelected,\r\n          toggleEnable,\r\n          toggleClear,\r\n          clearBoard,\r\n          mazeSelected,\r\n          toggleMaze,\r\n          clearWalls,\r\n          toggleClearWalls,\r\n          clearPath,\r\n          toggleClearPath\r\n        }) => {\r\n          if (this.state.available)\r\n            this.checkState(\r\n              enableVisualize,\r\n              algorithmSelected,\r\n              toggleEnable,\r\n              toggleClear,\r\n              clearBoard,\r\n              mazeSelected,\r\n              toggleMaze,\r\n              clearWalls,\r\n              toggleClearWalls,\r\n              clearPath,\r\n              toggleClearPath\r\n            );\r\n          return (\r\n            <table className=\"grid\">\r\n              <tbody>\r\n                {renderGrid.map((row, rowId) => {\r\n                  return (\r\n                    <tr id={rowId} key={rowId}>\r\n                      {row.map((node, nodeIdx) => {\r\n                        return (\r\n                          <Node\r\n                            key={nodeIdx}\r\n                            isStart={node.isStart}\r\n                            isFinish={node.isFinish}\r\n                            isVisited={node.isVisited}\r\n                            isWall={node.isWall}\r\n                            row={node.row}\r\n                            col={node.col}\r\n                            onMouseDown={(row, col) =>\r\n                              this.handleMouseDown(row, col, enableVisualize)\r\n                            }\r\n                            onMouseEnter={(row, col) =>\r\n                              this.handleMouseEnter(row, col, enableVisualize)\r\n                            }\r\n                            onMouseUp={() => this.handleMouseUp()}\r\n                          ></Node>\r\n                        );\r\n                      })}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          );\r\n        }}\r\n      </VisualizeContext.Consumer>\r\n    );\r\n  }\r\n}\r\n","export function buildStairCaseMaze(grid, ROW_COUNT, COL_COUNT) {\r\n  var wallsNodeOrder = [];\r\n  var row_aux = ROW_COUNT - 2;\r\n  var dirTop = true;\r\n  for (let col = 1; col < COL_COUNT - 1; col++) {\r\n    wallsNodeOrder.push(grid[row_aux][col]);\r\n    if (row_aux === 1) {\r\n      dirTop = !dirTop;\r\n    } else if (row_aux === ROW_COUNT - 2 && !dirTop) {\r\n      dirTop = !dirTop;\r\n    }\r\n    if (dirTop) row_aux -= 1;\r\n    else row_aux += 1;\r\n  }\r\n  return wallsNodeOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\n/* import Form from \"react-bootstrap/Form\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\n*/\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {\r\n  VisualizeContext,\r\n  DIJKSTRA,\r\n  ASTAR,\r\n  DFS,\r\n  BFS,\r\n  RECURSIVEMAZE,\r\n  SIMPLEMAZE,\r\n  RANDOMDFS,\r\n  STAIRCASEMAZE\r\n} from \"../../../context/selectionContext\";\r\nimport { ButtonToolbar } from \"react-bootstrap\";\r\n\r\nexport default class TopNavBar extends Component {\r\n  setAlgorithm(selection) {\r\n    this.props.algorithmSelectHandler(selection);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n        <Navbar.Brand href=\"#home\">PathFinder</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <AlgorithmDropDown />\r\n            <MazeAndPatterns />\r\n            <LoadingButton />\r\n            <ClearTab />\r\n            <ClearWallTab />;\r\n            <ClearPathTab />;\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nfunction AlgorithmDropDown() {\r\n  return (\r\n    <VisualizeContext.Consumer>\r\n      {({ algorithmSelected, toggleAlgorithm }) => {\r\n        return (\r\n          <NavDropdown title={\"Algorithm\"} id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item\r\n              onSelect={() => {\r\n                toggleAlgorithm(DIJKSTRA);\r\n              }}\r\n            >\r\n              Dijkstra\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onSelect={() => {\r\n                toggleAlgorithm(ASTAR);\r\n              }}\r\n            >\r\n              A* Algorithm\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onSelect={() => {\r\n                toggleAlgorithm(BFS);\r\n              }}\r\n            >\r\n              BFS\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onSelect={() => {\r\n                toggleAlgorithm(DFS);\r\n              }}\r\n            >\r\n              DFS\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              onSelect={() => {\r\n                toggleAlgorithm(RANDOMDFS);\r\n              }}\r\n            >\r\n              Random DFS\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n        );\r\n      }}\r\n    </VisualizeContext.Consumer>\r\n  );\r\n}\r\n\r\nfunction LoadingButton() {\r\n  const handleClick = toggleEnable => {\r\n    toggleEnable();\r\n  };\r\n\r\n  return (\r\n    <VisualizeContext.Consumer>\r\n      {({ algorithmSelected, toggleEnable, enableVisualize }) => {\r\n        return (\r\n          <ButtonToolbar>\r\n            {\" \"}\r\n            <Button\r\n              variant=\"primary\"\r\n              disabled={enableVisualize}\r\n              onClick={\r\n                !enableVisualize\r\n                  ? () => {\r\n                      handleClick(toggleEnable);\r\n                    }\r\n                  : null\r\n              }\r\n            >\r\n              {enableVisualize ? \"Loading…\" : \"Run \" + algorithmSelected}\r\n            </Button>\r\n          </ButtonToolbar>\r\n        );\r\n      }}\r\n    </VisualizeContext.Consumer>\r\n  );\r\n}\r\n\r\nfunction ClearTab() {\r\n  return (\r\n    <VisualizeContext.Consumer>\r\n      {({ toggleClear }) => {\r\n        return <Nav.Link onClick={toggleClear}>Clear Board</Nav.Link>;\r\n      }}\r\n    </VisualizeContext.Consumer>\r\n  );\r\n}\r\n\r\nfunction ClearWallTab() {\r\n  return (\r\n    <VisualizeContext.Consumer>\r\n      {({ toggleClearWalls }) => {\r\n        return <Nav.Link onClick={toggleClearWalls}>Clear Walls</Nav.Link>;\r\n      }}\r\n    </VisualizeContext.Consumer>\r\n  );\r\n}\r\n\r\nfunction ClearPathTab() {\r\n  return (\r\n    <VisualizeContext.Consumer>\r\n      {({ toggleClearPath }) => {\r\n        return <Nav.Link onClick={toggleClearPath}>Clear Paths</Nav.Link>;\r\n      }}\r\n    </VisualizeContext.Consumer>\r\n  );\r\n}\r\n\r\nfunction MazeAndPatterns() {\r\n  return (\r\n    <VisualizeContext.Consumer>\r\n      {({ toggleMaze }) => {\r\n        return (\r\n          <NavDropdown title={\"Mazes & Patterns\"} id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item onSelect={() => toggleMaze(RECURSIVEMAZE)}>\r\n              Recursive Division\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item onSelect={() => toggleMaze(SIMPLEMAZE)}>\r\n              Simple Maze\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item onSelect={() => toggleMaze(STAIRCASEMAZE)}>\r\n              Staircase Maze\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n        );\r\n      }}\r\n    </VisualizeContext.Consumer>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nimport \"./docBar.css\";\r\n\r\nexport function DocBar() {\r\n  return (\r\n    <div id=\"documentation\" key=\"documentation\" className=\"documentation\">\r\n      <Grid container spacing={1}>\r\n        <Grid container item xs={12} spacing={2}>\r\n          <Grid item xs={12} sm={4} md={4} lg={4}>\r\n            <div className=\"row\">\r\n              <div className=\"column\">\r\n                <div className=\"node node-wall\"></div>\r\n              </div>\r\n              <div className=\"spacer\"></div>\r\n              <div className=\"column\">\r\n                <div>Wall Node</div>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4} md={4} lg={4}>\r\n            <div className=\"row\">\r\n              <div className=\"column\">\r\n                <div className=\"node node-start\"></div>\r\n              </div>\r\n              <div className=\"spacer\"></div>\r\n              <div className=\"column\">\r\n                <div>Start Node</div>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n          <Grid item xs={12} sm={4} md={4} lg={4}>\r\n            <div className=\"row\">\r\n              <div className=\"column\">\r\n                <div className=\"node node-visited\"></div>\r\n              </div>\r\n              <div className=\"spacer\"></div>\r\n              <div className=\"column\">\r\n                <div>Visited Node</div>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4} md={4} lg={4}>\r\n            <div className=\"row\">\r\n              <div className=\"column\">\r\n                <div className=\"node node-finish\"></div>\r\n              </div>\r\n              <div className=\"spacer\"></div>\r\n              <div className=\"column\">\r\n                <div>End Node</div>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container item xs={12} spacing={3}></Grid>\r\n        <Grid container item xs={12} spacing={3}>\r\n          <Grid item xs={12} sm={4} md={4} lg={4}>\r\n            <div className=\"row\">\r\n              <div className=\"column\">\r\n                <div className=\"node node-shortest-path\"></div>\r\n              </div>\r\n              <div className=\"spacer\"></div>\r\n              <div className=\"column\">\r\n                <div>Visited Node</div>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={12} sm={4} md={4} lg={4}>\r\n            <div className=\"row\">\r\n              <div className=\"column\">\r\n                <div className=\"node node-empty\"></div>\r\n              </div>\r\n              <div className=\"spacer\"></div>\r\n              <div className=\"column\">\r\n                <div>Empty Node</div>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport const windowState = {\r\n  START_NODE_ROW: 5,\r\n  START_NODE_COL: 5,\r\n  FINISH_NODE_ROW: 15,\r\n  FINISH_NODE_COL: 30\r\n};\r\n\r\nexport const WindowContext = React.createContext(windowState);\r\n","import React from \"react\";\r\n\r\nimport GridView from \"./grid/grid.jsx\";\r\nimport TopNavBar from \"./navBar/topNavBar.jsx\";\r\nimport {DocBar} from './navBar/docBar.jsx';\r\nimport { WindowContext } from \"../../context/windowContext.js\";\r\n\r\nexport default function PathFinderVisualizer() {\r\n  return (\r\n    <WindowContext.Consumer>\r\n      {({ row_count, col_count }) => {\r\n        return (\r\n          <>\r\n            <TopNavBar />\r\n            <DocBar />\r\n            <GridView row_count={row_count} col_count={col_count} />\r\n          </>\r\n        );\r\n      }}\r\n    </WindowContext.Consumer>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport PathFinderVisualizer from \"./components/pathFinderVisualizer/pathFinderVisualizer\";\r\n\r\nimport {\r\n  visualizeState,\r\n  VisualizeContext\r\n} from \"./context/selectionContext.js\";\r\n\r\nimport { WindowContext } from \"./context/windowContext.js\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport useWindowDimensions from \"./windowsSize\";\r\n\r\nconst Main = () => {\r\n  const { height, width } = useWindowDimensions();\r\n\r\n  const { row_count, col_count } = getCounts(height, width);\r\n  return (\r\n    <WindowContext.Provider value={{ row_count, col_count }}>\r\n      <App />\r\n    </WindowContext.Provider>\r\n  );\r\n};\r\n\r\nfunction getCounts(height, width) {\r\n  var row_count;\r\n  var col_count;\r\n\r\n  var xSize = Math.floor((width)/ 25) - 0;\r\n  var ySize = Math.floor((height) / 25) - 10;\r\n  row_count = ySize % 2 === 0 ? ySize - 1 : ySize;\r\n  col_count = xSize % 2 === 0 ? xSize - 1 : xSize;\r\n  return { row_count, col_count };\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggleAlgorithm = algorithm => {\r\n      this.setState(state => ({\r\n        algorithmSelected: algorithm\r\n      }));\r\n    };\r\n\r\n    this.toggleMaze = maze => {\r\n      this.setState(state => ({\r\n        mazeSelected: maze\r\n      }));\r\n    };\r\n\r\n    this.toggleEnable = () => {\r\n      this.setState(state => ({\r\n        enableVisualize: !state.enableVisualize\r\n      }));\r\n    };\r\n\r\n    this.toggleClear = () => {\r\n      this.setState(state => ({\r\n        clearBoard: !state.clearBoard,\r\n        algorithmSelected: \"\"\r\n      }));\r\n    };\r\n\r\n    this.toggleClearWalls = () => {\r\n      this.setState(state => ({\r\n        clearWalls: !state.clearWalls\r\n      }));\r\n    };\r\n\r\n    this.toggleClearPath = () => {\r\n      this.setState(state => ({\r\n        clearPath: !state.clearPath\r\n      }));\r\n    };\r\n\r\n    this.state = {\r\n      algorithmSelected: visualizeState.algorithmSelected,\r\n      enableVisualize: visualizeState.enableVisualize,\r\n      toggleAlgorithm: this.toggleAlgorithm,\r\n      toggleEnable: this.toggleEnable,\r\n      toggleClear: this.toggleClear,\r\n      clearBoard: false,\r\n      mazeSelected: visualizeState.mazeSelected,\r\n      toggleMaze: this.toggleMaze,\r\n      clearWalls: false,\r\n      toggleClearWalls: this.toggleClearWalls,\r\n      clearPath: false,\r\n      toggleClearPath: this.toggleClearPath\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <VisualizeContext.Provider value={this.state}>\r\n        <PathFinderVisualizer />\r\n      </VisualizeContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Main from './App';\r\n\r\nReactDOM.render(<Main />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}